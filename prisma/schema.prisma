generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  categoryId       String     @id @db.Uuid
  categoryName     String     @db.VarChar(255)
  parentCategoryId String?    @db.Uuid
  parentCategory   Category?  @relation("ParentCategory", fields: [parentCategoryId], references: [categoryId], onDelete: Cascade)
  childCategory    Category[] @relation("ParentCategory")
  products         Product[]
}

model Product {
  productId       String            @id @db.Uuid
  vendorCode      String            @db.VarChar(50)
  productName     String            @db.VarChar(150)
  description     String            @db.VarChar(10000)
  weight          String            @db.VarChar(120)
  size            String            @db.VarChar(120)
  price           Int
  productSrc      String
  categoryId      String            @db.Uuid
  category        Category          @relation(fields: [categoryId], references: [categoryId], onDelete: Cascade)
  productsInCart  ProductsInCart[]
  productsOfOrder productsOfOrder[]
}

model Order {
  orderId             String                   @id @default(uuid()) @db.Uuid
  summ                Int                      @db.Integer
  clientId            String                   @db.Uuid
  orderType           OrderType
  orderStatus         OrderStatus?
  manufacturingStatus ManufacturingOrderStatus?
  client              Client                   @relation(fields: [clientId], references: [clientId])
  productsOfOrder     productsOfOrder[]
  comment             String?
  filesSrc            String[]
  deliveryDate        DateTime?
}

model ProductsInCart {
  clientId  String  @db.Uuid
  productId String  @db.Uuid
  client    Client  @relation(fields: [clientId], references: [clientId])
  product   Product @relation(fields: [productId], references: [productId], onDelete: Cascade)
  amount    Int

  @@id([clientId, productId])
}

model productsOfOrder {
  productId String  @db.Uuid
  orderId   String  @default(uuid()) @db.Uuid
  product   Product @relation(fields: [productId], references: [productId], onDelete: Cascade)
  order     Order   @relation(fields: [orderId], references: [orderId], onDelete: Cascade)
  amount    Int

  @@id([productId, orderId])
}

model Client {
  clientId       String           @id @default(uuid()) @db.Uuid
  fullName       String           @db.VarChar(120)
  phone          String?          @db.VarChar(25)
  email          String           @unique @db.VarChar(100)
  password       String           @db.VarChar(64)
  companyId      String?          @db.Uuid
  company        Company?         @relation(fields: [companyId], references: [companyId])
  orders         Order[]
  productsInCart ProductsInCart[]
  session        Session?
}

model Session {
  token    String @id @default(uuid()) @db.Uuid
  clientId String @unique @db.Uuid
  client   Client @relation(fields: [clientId], references: [clientId])
}

model Company {
  companyId   String   @id @default(uuid()) @db.Uuid
  inn         String   @unique @db.VarChar(12)
  companyName String   @db.VarChar(255)
  address     String   @db.VarChar(255)
  clients     Client[]
}

enum OrderType {
  order
  manufacturing
}

enum OrderStatus {
  new
  processing
  prepayment
  delivery
  postpayment
  success
  rejected
}

enum ManufacturingOrderStatus {
  new
  processing
  costEstimate
  approval
  prepayment
  manufacturing
  delivery
  postpayment
  success
  rejected
}
